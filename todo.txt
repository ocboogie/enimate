 - [x] Either simulate strokes on the CPU by sending two meshes to the GPU as
   different draw calls, or implement it into the shader?
 - [x] Add scenes in scenes that have different time scales (i.e., I could have a 
   scene in a scene that has a specific range of time and a different time scale
 - [x] Add debugging tech like outlines and wireframes (perhaps in the shader)
 - Make motions more efficient by using references for their objects 
   and have the Motion trait have a lifetime
 - [x] Root motions should not be in builder state 
   - [x] Actually should probably refactor the whole thing
 - [ ] Move everything to cgmath instead of using bits of egui
 - [x] MoveTo -> MoveTo: just calcuate the "from" position in the motion
 - [ ] Maybe motions should be called `Command`s?
 - [ ] Should components just be Into<Object> (should they be allowed to play
       animations).
 - [ ] Custom typst renderer with no svg needed, check the SVG renderer as 
       a reference
 - [x] `BuilderExt` and `HandlerExt`
 - [ ] `Builder` should really only have `.play` and `.add`/`.build` methods
 - [x] `Interpolatable` trait?
 - [ ] Figure out the error handling story for motions and components
 - [ ] Collect `Component`s into group
 - [x] `Property<T, Updater>` struct that can be used to 
 - [ ] Split into `core`, `egui`, and builder modules
